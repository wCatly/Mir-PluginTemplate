
local ffi = require "ffi"

local demo_h = require "demo_h"
local format_value = demo_h.format_value

local col_bad = ig.ColorConvertU32ToFloat4(0xff000099)
local col_good = ig.ColorConvertU32ToFloat4(0xff009900)

local botm_draw_menu = function(p_open)    
    if ig.Begin("Demo: Lifetime of Objects", p_open) then
        ig.TextWrapped("It is important to understand that any pointer to an object exposed in the BotM API internally refers to a memory address from league.")
        ig.TextWrapped("BotM guarantees you that this memory address is valid in the context of the currently executed tick.")
        ig.PushStyleColor(ig.lib.ImGuiCol_Text, 0xff00ffff)
        ig.TextWrapped("Using pointers to objects outside of the tick they were retrieved will result in undefined behaviour, most likely crashes!")
        ig.PopStyleColor(1)
        ig.NewLine()
        ig.PushStyleColor(ig.lib.ImGuiCol_Text, demo_h.col_text)
        ig.TextColored(col_bad, "local corrupted_buff")
        ig.TextColored(col_bad, "local corrupted_spell")
        ig.NewLine()
        ig.Text("event.process_spell(spell)")
        ig.TextColored(col_bad, "\tcorrupted_spell = spell")
        ig.Text("end")
        ig.NewLine()
        ig.Text("event.tick = function()")
        ig.Text("\tif corrupted_buff then")
        ig.TextColored(col_bad, "\t\t--accessing corrupted_buff in the tick after retrieval")
        ig.TextColored(col_bad, "\t\tprint(corrupted_buff:Name())")
        ig.Text("\tend")
        ig.Text("\tlocal buff = player:GetBuff(BuffType_Stun)")
        ig.Text("\tif buff then")
        ig.TextColored(col_bad,"\t\tcorrupted_buff = buff")
        ig.Text("\tend")
        ig.Text("\tif corrupted_spell then")
        ig.TextColored(col_bad, "\t\t--accessing corrupted_spell in the tick after retrieval")
        ig.TextColored(col_bad, "\t\tprint(corrupted_spell:Name())")
        ig.Text("\tend")
        ig.Text("end")
        ig.PopStyleColor(1)
        ig.NewLine()
        ig.TextWrapped("GameObjects are safe to use from the time of creation to the time of deletion")
        ig.NewLine()
        ig.PushStyleColor(ig.lib.ImGuiCol_Text, demo_h.col_text)
        ig.Text("local my_missile")
        ig.NewLine()
        ig.Text("event.create_object(obj)")
        ig.Text("\tif not obj:IsMissile() then")
        ig.Text("\t\treturn")
        ig.Text("\tend")
        ig.Text("\tlocal obj = obj:AsMissile()")
        ig.Text("\tif not my_missile then")
        ig.Text("\t\tlocal source = obj:Source()")
        ig.Text("\t\tif source and source:IsPlayer() then")
        ig.TextColored(col_good, "\t\t\tmy_missile = obj")
        ig.Text("\t\tend")
        ig.Text("\tend")
        ig.Text("end")
        ig.NewLine()
        ig.Text("event.delete_object(id)")
        ig.Text("\tif my_missile and my_missile:Id() == id then")
        ig.TextColored(col_good, "\t\tmy_missile = nil")
        ig.Text("\tend")
        ig.Text("end")
        ig.NewLine()
        ig.Text("event.tick = function()")
        ig.Text("\tif my_missile then")
        ig.TextColored(col_good, "\t\t--OK")
        ig.TextColored(col_good, "\t\tprint(my_missile:Pos())")
        ig.Text("\tend")
        ig.Text("end")
        ig.PopStyleColor(1)
    end 
    ig.End()
end

return {
    botm_draw_menu = botm_draw_menu,
}